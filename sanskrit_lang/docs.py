"""
Sanskrit Language Documentation System
Built-in documentation and help system
"""

from typing import Dict, List, Optional

class DocumentationSystem:
    """Documentation system for Sanskrit language"""
    
    def __init__(self):
        self.docs = self._initialize_docs()
    
    def _initialize_docs(self) -> Dict[str, str]:
        """Initialize documentation content"""
        return {
            # Basic concepts
            'परिचय': '''
संस्कृत प्रोग्रामिंग भाषा

संस्कृत एक आधुनिक प्रोग्रामिंग भाषा है जो संस्कृत व्याकरण से प्रेरित है।
यह मजबूत प्रकार अनुमान, स्पष्ट सिंटैक्स और समृद्ध मानक पुस्तकालय प्रदान करती है।

मुख्य विशेषताएं:
• संस्कृत आधारित कीवर्ड और सिंटैक्स
• स्वचालित प्रकार अनुमान
• अंतर्निहित संपादक और REPL
• व्यापक मानक पुस्तकालय
            ''',
            
            # Variables
            'चर': '''
चर परिभाषा (Variables)

चर परिभाषित करने के लिए 'धारणा' कीवर्ड का उपयोग करें:

    धारणा नाम = "राम"
    धारणा उम्र = २५
    धारणा वेतन = ५०००.५०

स्थिर चर के लिए 'स्थिर' का उपयोग करें:

    स्थिर पाई = ३.१४१५९

चर नाम संस्कृत या अंग्रेजी में हो सकते हैं।
            ''',
            
            # Data types
            'प्रकार': '''
डेटा प्रकार (Data Types)

मूल प्रकार:
• संख्या (पूर्ण): १, २, १०० 
• संख्या (दशमलव): ३.१४, २.५
• शब्द (स्ट्रिंग): "नमस्ते", 'संस्कृत'
• सत्य/असत्य (बूलियन): सत्य, असत्य
• शून्य (नल): शून्य

संग्रह प्रकार:
• सूची: [१, २, ३]
• शब्दकोश: {"नाम": "राम", "उम्र": २५}

प्रकार जांच:
    प्रकार(चर_नाम)
            ''',
            
            # Functions
            'कार्य': '''
फ़ंक्शन (Functions)

फ़ंक्शन परिभाषा:

    कार्य नमस्कार(नाम) {
        मुद्रण("नमस्ते", नाम)
    }

वापसी मान के साथ:

    कार्य योग(क, ख) {
        वापसी क + ख
    }

फ़ंक्शन कॉल:

    नमस्कार("राम")
    परिणाम = योग(५, ३)

अंतर्निहित फ़ंक्शन:
• मुद्रण() - प्रिंट करने के लिए
• प्रकार() - प्रकार जांच के लिए
• लम्बाई() - लंबाई जांच के लिए
            ''',
            
            # Control flow
            'नियंत्रण': '''
नियंत्रण प्रवाह (Control Flow)

शर्त (If statement):

    यदि उम्र >= १८ {
        मुद्रण("वयस्क")
    } अथवा {
        मुद्रण("नाबालिग")
    }

लूप (While loop):

    गिनती = १
    यावत् गिनती <= १० {
        मुद्रण(गिनती)
        गिनती = गिनती + १
    }

फॉर लूप:

    प्रति संख्या में [१, २, ३, ४, ५] {
        मुद्रण(संख्या)
    }
            ''',
            
            # Classes
            'वर्ग': '''
वर्ग (Classes)

वर्ग परिभाषा:

    वर्ग व्यक्ति {
        कार्य प्रारंभ(नाम, उम्र) {
            यह.नाम = नाम
            यह.उम्र = उम्र
        }
        
        कार्य परिचय() {
            मुद्रण("मैं", यह.नाम, "हूं")
        }
    }

ऑब्जेक्ट बनाना:

    राम = व्यक्ति("राम", २५)
    राम.परिचय()
            ''',
            
            # Standard library
            'पुस्तकालय': '''
मानक पुस्तकालय (Standard Library)

गणित मॉड्यूल:
    आयात गणित
    गणित.वर्गमूल(१६)  # 4
    गणित.sin(गणित.pi/२)  # 1

शब्द मॉड्यूल:
    आयात शब्द
    शब्द.uchcha("नमस्ते")  # "नमस्ते"
    शब्द.lambai("संस्कृत")  # 7

प्रवेश मॉड्यूल:
    आयात प्रवेश
    नाम = प्रवेश.paath("नाम दर्ज करें: ")
    प्रवेश.file_padhiye("फ़ाइल.txt")
            ''',
            
            # Operators
            'संकारक': '''
संकारक (Operators)

अंकगणितीय:
• + (योग) - जोड़
• - (व्यवकलन) - घटाव  
• * (गुणा) - गुणा
• / (भाग) - भाग
• % (शेष) - मॉड्यूलो

तुलना:
• == (समान) - बराबर
• != (असमान) - नहीं बराबर
• < (लघु) - छोटा
• > (महान्) - बड़ा
• <= (लघु समान) - छोटा या बराबर
• >= (महान् समान) - बड़ा या बराबर

तार्किक:
• च (और) - AND
• वा (या) - OR
• न (नहीं) - NOT
            ''',
            
            # Error handling
            'त्रुटि': '''
त्रुटि प्रबंधन (Error Handling)

सामान्य त्रुटियां:

व्याकरण त्रुटि:
- गलत सिंटैक्स
- अपूर्ण कोष्ठक

रनटाइम त्रुटि:
- अपरिभाषित चर
- गलत फ़ंक्शन कॉल

प्रकार त्रुटि:
- असंगत प्रकार
- गलत ऑपरेशन

त्रुटि संदेश संस्कृत में दिए जाते हैं।
            ''',
            
            # Examples
            'उदाहरण': '''
उदाहरण प्रोग्राम

सरल कैलकुलेटर:

    कार्य कैलकुलेटर() {
        क = संख्या(paath("पहली संख्या: "))
        ख = संख्या(paath("दूसरी संख्या: "))
        
        योग = क + ख
        अंतर = क - ख
        गुणनफल = क * ख
        
        मुद्रण("योग:", योग)
        मुद्रण("अंतर:", अंतर) 
        मुद्रण("गुणनफल:", गुणनफल)
    }

फिबोनाची श्रृंखला:

    कार्य फिबोनाची(n) {
        यदि n <= १ {
            वापसी n
        }
        वापसी फिबोनाची(n-१) + फिबोनाची(n-२)
    }
            ''',
        }
    
    def get_documentation(self, topic: str) -> Optional[str]:
        """Get documentation for a topic"""
        # Try exact match first
        if topic in self.docs:
            return self.docs[topic]
        
        # Try partial match
        for key, value in self.docs.items():
            if topic.lower() in key.lower() or key.lower() in topic.lower():
                return value
        
        return None
    
    def get_topics(self) -> List[str]:
        """Get list of available topics"""
        return list(self.docs.keys())
    
    def search_documentation(self, query: str) -> List[str]:
        """Search for topics containing query"""
        results = []
        query_lower = query.lower()
        
        for topic, content in self.docs.items():
            if (query_lower in topic.lower() or 
                query_lower in content.lower()):
                results.append(topic)
        
        return results
    
    def get_function_help(self, function_name: str) -> Optional[str]:
        """Get help for built-in functions"""
        function_docs = {
            'मुद्रण': '''
मुद्रण(*args, **kwargs)

आउटपुट प्रिंट करने के लिए उपयोग करें।

उदाहरण:
    मुद्रण("नमस्ते")
    मुद्रण("नाम:", नाम, "उम्र:", उम्र)
            ''',
            
            'प्रकार': '''
प्रकार(obj)

ऑब्जेक्ट का प्रकार जांचने के लिए।

उदाहरण:
    प्रकार(१२३)      # "पूर्ण_संख्या"
    प्रकार("हैलो")    # "शब्द"
    प्रकार(सत्य)     # "सत्य_असत्य"
            ''',
            
            'लम्बाई': '''
लम्बाई(obj)

स्ट्रिंग, सूची आदि की लंबाई पता करने के लिए।

उदाहरण:
    लम्बाई("संस्कृत")     # 7
    लम्बाई([१, २, ३])    # 3
            ''',
            
            'संख्या': '''
संख्या(obj)

स्ट्रिंग को संख्या में बदलने के लिए।

उदाहरण:
    संख्या("123")     # 123
    संख्या("३.१४")    # 3.14
            ''',
            
            'सुन्दर': '''
सुन्दर(obj)

ऑब्जेक्ट को स्ट्रिंग में बदलने के लिए।

उदाहरण:
    सुन्दर(१२३)      # "123"
    सुन्दर(सत्य)     # "सत्य"
            ''',
        }
        
        return function_docs.get(function_name)
    
    def get_module_help(self, module_name: str) -> Optional[str]:
        """Get help for standard library modules"""
        module_docs = {
            'गणित': '''
गणित मॉड्यूल

गणितीय फ़ंक्शन और स्थिरांक।

स्थिरांक:
• pi - पाई का मान
• e - ई का मान

फ़ंक्शन:
• वर्ग(x) - x का वर्ग
• वर्गमूल(x) - x का वर्गमूल
• गुणा(a, b) - a और b का गुणा
• भाग(a, b) - a को b से भाग
• sin(x), cos(x), tan(x) - त्रिकोणमितीय फ़ंक्शन
• log(x) - लघुगणक
• factorial(n) - क्रमगुणित

उदाहरण:
    आयात गणित
    गणित.वर्गमूल(१६)
    गणित.sin(गणित.pi/२)
            ''',
            
            'शब्द': '''
शब्द मॉड्यूल

स्ट्रिंग प्रोसेसिंग फ़ंक्शन।

फ़ंक्शन:
• lambai(text) - स्ट्रिंग की लंबाई
• uchcha(text) - अपरकेस में बदलें
• laghu(text) - लोअरकेस में बदलें
• vibhajan(text, sep) - स्ट्रिंग को बांटें
• sandharan(list, sep) - स्ट्रिंग जोड़ें
• sthaan_badal(text, old, new) - टेक्स्ट बदलें

उदाहरण:
    आयात शब्द
    शब्द.uchcha("नमस्ते")
    शब्द.vibhajan("क,ख,ग", ",")
            ''',
            
            'प्रवेश': '''
प्रवेश मॉड्यूल

इनपुट/आउटपुट ऑपरेशन।

फ़ंक्शन:
• paath(prompt) - यूजर से इनपुट लें
• sankhya_paath(prompt) - संख्या इनपुट लें
• mudran(*args) - आउटपुट प्रिंट करें
• file_padhiye(path) - फ़ाइल पढ़ें
• file_likhiye(path, content) - फ़ाइल लिखें
• file_hai(path) - फ़ाइल मौजूद है या नहीं

उदाहरण:
    आयात प्रवेश
    नाम = प्रवेश.paath("नाम दर्ज करें: ")
    सामग्री = प्रवेश.file_padhiye("test.txt")
            ''',
        }
        
        return module_docs.get(module_name)
    
    def format_help(self, topic: str) -> str:
        """Format help text for display"""
        content = self.get_documentation(topic)
        if not content:
            # Try function help
            content = self.get_function_help(topic)
        if not content:
            # Try module help
            content = self.get_module_help(topic)
        
        if content:
            return f"सहायता: {topic}\n{'='*50}\n{content.strip()}"
        else:
            return f"'{topic}' के लिए सहायता उपलब्ध नहीं है।"
    
    def get_quick_reference(self) -> str:
        """Get quick reference guide"""
        return """
संस्कृत प्रोग्रामिंग भाषा - त्वरित संदर्भ

मूल सिंटैक्स:
  धारणा चर = मान         # चर परिभाषा
  मुद्रण("संदेश")          # आउटपुट प्रिंट
  यदि शर्त { ... }        # शर्त
  यावत् शर्त { ... }       # लूप
  कार्य नाम() { ... }      # फ़ंक्शन

डेटा प्रकार:
  संख्या: १, २.५, -१०
  शब्द: "टेक्स्ट", 'टेक्स्ट'
  बूलियन: सत्य, असत्य
  शून्य

ऑपरेटर:
  + - * / %              # अंकगणित
  == != < > <= >=        # तुलना
  च वा न                 # तार्किक

मॉड्यूल:
  आयात गणित             # गणित मॉड्यूल
  आयात शब्द             # स्ट्रिंग मॉड्यूल  
  आयात प्रवेश           # I/O मॉड्यूल

सहायता:
  दस्तावेज़ विषय         # विषय की सहायता
  दस्तावेज़              # सभी विषय देखें
        """
    
    def get_welcome_message(self) -> str:
        """Get welcome message for REPL"""
        return """
स्वागतम्! संस्कृत प्रोग्रामिंग भाषा में आपका स्वागत है।

सहायता के लिए:
• 'सहायता' या 'help' टाइप करें
• 'दस्तावेज़' सभी विषय देखने के लिए
• 'उदाहरण' उदाहरण देखने के लिए
• 'बाहर' या 'exit' बाहर निकलने के लिए

प्रारंभ करने के लिए कुछ कोड लिखें:
  मुद्रण("नमस्ते संसार!")
        """
